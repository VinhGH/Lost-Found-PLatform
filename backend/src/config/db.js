import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load bi·∫øn m√¥i tr∆∞·ªùng
dotenv.config();

// L·∫•y th√¥ng tin k·∫øt n·ªëi t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

// Ki·ªÉm tra xem c√°c bi·∫øn m√¥i tr∆∞·ªùng c√≥ t·ªìn t·∫°i kh√¥ng
if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Thi·∫øu th√¥ng tin k·∫øt n·ªëi Supabase trong file .env');
  console.error('Vui l√≤ng ki·ªÉm tra SUPABASE_URL v√† SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

// T·∫°o Supabase client
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// H√†m ki·ªÉm tra k·∫øt n·ªëi database
const testConnection = async () => {
  try {
    console.log('üîÑ ƒêang ki·ªÉm tra k·∫øt n·ªëi Supabase...');
    
    // Th·ª≠ th·ª±c hi·ªán m·ªôt query ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
    const { data, error } = await supabase
      .from('Account')
      .select('account_id')
      .limit(1);
    
    if (error) {
      console.error('‚ùå L·ªói k·∫øt n·ªëi Supabase:', error.message);
      return false;
    }
    
    console.log('‚úÖ K·∫øt n·ªëi Supabase th√†nh c√¥ng!');
    return true;
  } catch (err) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra k·∫øt n·ªëi:', err.message);
    return false;
  }
};

// H√†m l·∫•y Supabase client
const getSupabaseClient = () => {
  return supabase;
};

// H√†m th·ª±c hi·ªán query v·ªõi error handling
const executeQuery = async (queryFn) => {
  try {
    const result = await queryFn(supabase);
    return { success: true, data: result.data, error: result.error };
  } catch (err) {
    console.error('‚ùå L·ªói th·ª±c hi·ªán query:', err.message);
    return { success: false, data: null, error: err.message };
  }
};

export {
  supabase,
  getSupabaseClient,
  testConnection,
  executeQuery
};
