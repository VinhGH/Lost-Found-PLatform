---
alwaysApply: true
---
{
  "project_name": "Lost & Found Platform (DTU)",
  "rules": [
    {
      "scope": "global",
      "instructions": [
        "Dự án gồm hai phần chính: backend (Express + PostgreSQL) và frontend (React + Vite + Material UI).",
        "Cursor chỉ được phép chỉnh sửa trong hai thư mục chính: backend/ và frontend/.",
        "Không tự tạo hoặc ghi đè file ngoài hai thư mục này nếu không có hướng dẫn từ developer.",
        "Không được chỉnh sửa file .env hoặc file cấu hình nhạy cảm (config/db.js, vite.config.js).",
        "Khi thêm mới file, phải đặt đúng vị trí và theo naming convention của nhóm.",
        "Tuân thủ cấu trúc code và style hiện tại, giữ nguyên indent, nháy đơn, camelCase và PascalCase."
      ]
    },
    {
      "scope": "frontend",
      "path": "frontend/",
      "instructions": [
        "Frontend sử dụng React + Vite + Axios + Material UI.",
        "Không dùng Create React App (CRA).",
        "Các component React phải là function component, không dùng class component.",
        "Hook được khuyến khích: useState, useEffect, useContext, useNavigate, v.v.",
        "Tất cả request API phải dùng axios từ services/api.js (baseURL = import.meta.env.VITE_API_BASE_URL).",
        "Không hardcode URL trực tiếp trong component.",
        "Email @dtu.edu.vn phải được validate trước khi đăng ký.",
        "Không log hoặc lưu password trong localStorage hay console.",
        "Chỉ lưu JWT token (nếu có) vào localStorage với key 'token'.",
        "Khi đăng nhập/đăng ký thành công, hiển thị thông báo (alert hoặc Material UI Snackbar).",
        "UI tuân theo Material UI, không cài thêm thư viện UI ngoài danh sách trong package.json.",
        "Thay đổi style bằng sx={} hoặc styled() — không override CSS sâu.",
        "Code FE phải chạy được bằng npm run dev (port 5173)."
      ]
    },
    {
      "scope": "backend",
      "path": "backend/",
      "instructions": [
        "Backend chạy bằng Node.js + Express + PostgreSQL (qua thư viện pg).",
        "Không sử dụng ORM như Sequelize hoặc Prisma.",
        "Truy vấn dữ liệu phải dùng parameterized query hoặc stored function (plpgsql), không nối chuỗi.",
        "Cấu trúc thư mục chuẩn: config/, routes/, controllers/, middleware/, modules/, utils/.",
        "Port backend mặc định là 5000.",
        "Các route phải bắt đầu bằng /api/, ví dụ: /api/accounts/login, /api/posts.",
        "index.js phải có app.use('/api', routes).",
        "Response JSON phải chuẩn hóa: { success, message, data } hoặc { token, user }.",
        "Không trả về HTML thô hoặc string thuần.",
        "Không log thông tin nhạy cảm như password, JWT, hoặc query DB.",
        "Tất cả biến kết nối (DB_HOST, DB_USER, DB_PASSWORD, JWT_SECRET) phải lấy từ .env.",
        "Nếu kết nối DB thất bại, log lỗi nhưng server vẫn chạy.",
        "CORS phải cho phép origin trong .env (CORS_ORIGIN=http://localhost:5173).",
        "Khi thêm module mới (posts, match, notification), phải tách rõ controller và model logic."
      ]
    },
    {
      "scope": "auth",
      "path": "backend/src/modules/account/",
      "instructions": [
        "Phải có hai endpoint chính: POST /login và POST /register.",
        "Login kiểm tra tồn tại email, so sánh mật khẩu bằng bcrypt.compare().",
        "Nếu đúng, trả về { success: true, token, user }. Nếu sai, trả { success: false, message: 'Invalid credentials' }.",
        "Không trả về password trong response.",
        "Register phải hash mật khẩu trước khi lưu vào DB bằng bcrypt.hash().",
        "Email phải có domain @dtu.edu.vn.",
        "Kiểm tra trùng email trước khi insert.",
        "Xử lý lỗi bằng try/catch, trả JSON { success: false, message: error.message }.",
        "Không log password hoặc JWT ra console."
      ]
    },
    {
      "scope": "frontend-auth",
      "path": "frontend/src/pages/",
      "instructions": [
        "Form Login và Register phải gọi API bằng axios.post('/accounts/login' hoặc '/accounts/register').",
        "Khi thành công, lưu token vào localStorage và điều hướng user tới trang chính.",
        "Hiển thị lỗi rõ ràng (alert hoặc snackbar) khi API trả về 400 hoặc 401.",
        "Không log dữ liệu form hoặc password ra console.",
        "Các input phải có type đúng: email, password, text.",
        "Dùng Material UI TextField, Button, Typography, Container.",
        "Không tạo thêm thư viện form ngoài React hook form nếu chưa có trong package.json."
      ]
    },
    {
      "scope": "security",
      "instructions": [
        "Không commit file .env hoặc chứa secret lên GitHub.",
        "Không log thông tin nhạy cảm (password, JWT, query SQL).",
        "Không gửi stack trace lỗi SQL ra client.",
        "Không để hardcode token hoặc key trong code.",
        "Dùng bcrypt để hash mật khẩu, JWT để tạo token.",
        "JWT secret bắt buộc nằm trong biến môi trường.",
        "CORS chỉ cho phép origin xác định trong .env."
      ]
    },
    {
      "scope": "linting",
      "instructions": [
        "Dùng dấu nháy đơn ('') thay vì nháy kép.",
        "Indent 2 spaces toàn bộ JS/JSX.",
        "Luôn có dấu ; kết thúc statement.",
        "Tên biến theo camelCase, component theo PascalCase.",
        "Không dùng console.log trong production.",
        "Viết comment ngắn gọn khi function có logic phức tạp.",
        "Ưu tiên async/await thay vì .then()."
      ]
    },
    {
      "scope": "error-handling",
      "instructions": [
        "Mọi hàm async trong backend phải có try/catch.",
        "Khi lỗi, trả về JSON: { success: false, message: error.message }.",
        "Không để server crash nếu lỗi DB hoặc query sai.",
        "Chỉ log lỗi ở console server, không trả stack trace cho FE.",
        "Middleware errorHandler phải xử lý lỗi tập trung cuối cùng."
      ]
    }
  ]
}
